import urllib.parse
import re
import requests
import vt

# Define your VirusTotal API key here
VIRUSTOTAL_API_KEY = 'API KEY'

def fang_url(defanged_url):
    # Replace '[.]' in the netloc with '.'
    fanged_url = defanged_url.replace('[.]', '.')

    # If the fanged URL doesn't start with 'http://', add 'http://'
    if not fanged_url.startswith('http://'):
        fanged_url = 'http://' + fanged_url

    # Decode the path and query components
    parsed_url = urllib.parse.urlparse(fanged_url)
    path = urllib.parse.unquote(parsed_url.path)
    query = urllib.parse.unquote(parsed_url.query)

    # Reconstruct the fanged URL
    fanged_url = urllib.parse.urlunparse((
        parsed_url.scheme,
        parsed_url.netloc,
        path,
        '',
        query,
        ''
    ))

    return fanged_url

def extract_urls(text):
    # Regular expression to match URLs, including email addresses with '[.]' in the domain
    url_pattern = r'(?:https?://)?(?:www\.)?(?:[a-zA-Z0-9.-]+(?:\[\.\][a-zA-Z0-9.-]+)+|(?:[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\[\.\][a-zA-Z]{2,}))'

    # Find all URLs in the text
    urls = re.findall(url_pattern, text)
    return urls

def get_virustotal_file_report(hash_value):
    # Initialize the VirusTotal client
    client = vt.Client(VIRUSTOTAL_API_KEY)

    try:
        # Get information about the file using its SHA-256, SHA-1, or MD5 hash
        file_report = client.get_object(f"/files/{hash_value}")
        return file_report

    except vt.error.APIError as e:
        # Handle the case when the file is not found on VirusTotal
        if e.args[0] == 'NotFoundError':
            return None
        else:
            raise e

    finally:
        # Close the VirusTotal client session to avoid unclosed session errors
        client.close()

def get_virustotal_url_report(url):
    # Initialize the VirusTotal client
    client = vt.Client(VIRUSTOTAL_API_KEY)

    try:
        # Generate the URL identifier using vt.url_id
        url_id = vt.url_id(url)

        # Get information about the URL
        url_report = client.get_object(f"/urls/{url_id}")
        return url_report

    except vt.error.APIError as e:
        # Handle the case when the URL is not found on VirusTotal
        if e.args[0] == 'NotFoundError':
            return None
        else:
            raise e

    finally:
        # Close the VirusTotal client session to avoid unclosed session errors
        client.close()

# Get user input for the report content
print("Enter the report content (type 'done' on a new line and press Enter to finish input):")

# Read user input for the report content
report_lines = []
while True:
    line = input()
    if line.strip().lower() == 'done':
        break
    report_lines.append(line)

# Concatenate the report lines
report_content = '\n'.join(report_lines)

# Extract URLs from the report
urls_in_report = extract_urls(report_content)

# Remove duplicates
unique_urls = list(set(urls_in_report))

# Fang, get VirusTotal report, and print the extracted unique URLs with numbering
if unique_urls:
    print("Extracted URLs:")
    for i, url in enumerate(unique_urls, start=1):
        fanged_url = fang_url(url)
        print(f"{i}. Original Defanged URL: {url}")
        print(f"   Fanged URL: {fanged_url}")

        # Get the VirusTotal report for the URL
        vt_url_report = get_virustotal_url_report(fanged_url)
        if vt_url_report:
            print(f"   VirusTotal URL Report: http://www.virustotal.com/gui/url/{vt_url_report.id}\n")
        else:
            print("   VirusTotal URL Report: Not available\n")
else:
    print("No URLs found in the report.")
